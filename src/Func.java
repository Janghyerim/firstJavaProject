
public class Func {
	
	//메소드 (함수) : 객체의 기능을 구현한다.
	
//	리턴타입 메소드명([매개변수1,매개변수2]...(변수 여러개 가능)) {
//		        //대괄호의 기능은 꼭 필요한게 아니면 빼도된다.
//      실행문장	
//		[return 값]
//	}
	
	//리턴타입 : void, 기본자료형, 참조형
	//메소드명 : 낙타표기법(소문자로 시작해 두단어면 뒤에 대문자로 시작)
	//매개변수 : int x, double d, Tv t... ->기본형,참조형
	//return : 리턴타입이 void가 아닌경우에 사용한다.
	
//	void add() {  //메소드의 선언부(시그니쳐)
//		System.out.println(2+3);  //메소드의 구현부
//	}
//	
//	void add2(int x, int y) {
//		System.out.println(x + y);
//	}	
//    int add3(int x,int y) {
//    	int sum = x + y;
//    	return sum; //리턴타입을 쓸땐 리턴값에 비례해 데이터타입을 바꿔줘야 한다.
//    }
//    int sub(int x,int y) {
//    	int sub = x-y;
//    	return sub;
//    }	
//    int	mul(int x,int y) {
//    	int mul = x*y;
//    	return mul;
//    }	
//    double div(double x,double y) {  //데이터 타입은 자유롭게
//    	double div = x/y;
//    	return div;
//    }
    
//    void test(int x,int y) { //void함수의 조건문 안에 리턴값은 즉시 종료를 뜻하고 값이 없다.
//    	
//    	if(x < y) {
//    		System.out.println("함수의 종료");
//    		return; //함수의 즉시 종료
//    	}
//    	int result = x + y;
//    	System.out.println(result);
//    }
//    
//    int test2(int x,int y) {  //설명필요
//    	
//    	int result; //2.변수 하나를 선언해서 묶어서 리턴값에 변수를 대입하여 결과를 출력할 수있다.
//    	
//    	if(x > y) {
//    		result = x; //1.조건 하나에만 리턴을 달면 안된다.
//    	}else {
//    		result = y; 
//    	}
//    	return result;
//    }
    
//    void call1() {
//    	System.out.println("call1");
//    	call2();
//    }
//    
//    void call2() {
//    	System.out.println("call2");
//    	call3();
//    }
//    
//    void call3() {
//    	System.out.println("call3");
//    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

}
